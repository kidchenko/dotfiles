#!/usr/bin/env bash
# Sourced by .zshrc

# Create a new directory and enter it
mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location (macOS specific)
if [[ "$(uname -s)" == "Darwin" ]]; then
    cdf() { # short for `cdfinder`
        cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)' 2>/dev/null || echo "$HOME")";
    }
fi

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" --exclude="*.Spotlight*" --exclude="*.Trashes*" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null || # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null    # GNU `stat`
	);

    if [ -z "$size" ]; then
        echo "Error: Could not determine size of ${tmpFile}. Aborting."
        rm -f "${tmpFile}" # Clean up tar file
        return 1
    fi

	local cmd="";
	if (( size < 52428800 )) && command -v zopfli &> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if command -v pigz &> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || { echo "Compression failed with ${cmd}."; rm -f "${tmpFile}"; return 1; }
	[ -f "${tmpFile}" ] && rm "${tmpFile}"; # Remove original .tar file

	zippedFile="${tmpFile}.gz"
	if [ ! -f "$zippedFile" ] && [ "$cmd" == "zopfli" ]; then # zopfli names output file .tar.gz directly
	    # if zopfli created filename.tar.gz directly, it is fine.
	    # if it created filename.tar.gz and we expected filename.gz, this check is needed
	    # but usually zopfli does create .tar.gz. if tmpFile was "archive.tar", output is "archive.tar.gz"
	    : # Assuming zopfli behaves as expected
	elif [ ! -f "$zippedFile" ]; then
		# pigz/gzip might create .gz, so tmpFile.gz should exist
		# If pigz/gzip output to stdout and we redirected, this check is also fine.
		# The command used `${cmd}" -v "${tmpFile}"` compresses in-place, so this should be fine.
		echo "Error: Compressed file ${zippedFile} not found."
		return 1
	fi


	zippedSize=$(
		stat -f"%z" "${zippedFile}" 2> /dev/null || # macOS `stat`
		stat -c"%s" "${zippedFile}" 2> /dev/null    # GNU `stat`
	);

    if [ -z "$zippedSize" ]; then
        echo "Error: Could not determine size of ${zippedFile}."
        return 1
    fi

	echo "${zippedFile} ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then # GNU `du`
		local arg=-sbh;
	else # BSD/macOS `du`
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*; # Current directory items including hidden
	fi;
}

# Use Git’s colored diff when available if `diff` is called
# This overrides the system `diff` command. Use with caution or rename (e.g., `gitdiff`).
# For now, I will keep it as `diff` as in original, but it's a strong candidate for renaming.
if command -v git &>/dev/null; then
	git_diff_func() { # Renamed internally to avoid recursion if alias/function `diff` is already set by shell
		git diff --no-index --color-words "$@";
	}
	# Consider if this should be an alias instead: alias diff='git diff --no-index --color-words'
    # If defined as function `diff() { ... }`, it overrides `git diff` too.
    # The original was `function diff()`, so keeping that pattern.
    # function diff() { git_diff_func "$@"; }
    # Better: only define if not already a `git diff` alias from git itself.
    # For now, let's assume it's intended to override system diff for specific use cases.
    # To be safe, let's make it `gdiff` to avoid conflict. User can alias `diff=gdiff` if they want.
    gdiff() {
        git diff --no-index --color-words "$@";
    }
fi

# Create a data URL from a file
dataurl() {
    if [ -z "$1" ] || [ ! -f "$1" ]; then
        echo "Usage: dataurl <file>"
        return 1
    fi
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -A -in "$1")"; # -A for base64 to output on one line (GNU)
                                                                    # macOS base64 is different, use -b 0 or pipe to tr -d '\n'
                                                                    # openssl base64 is more portable here.
}

# Start an HTTP server from a directory, optionally specifying the port
server() {
	local port="${1:-8000}";
	local ip_addr="0.0.0.0" # Listen on all interfaces

	# Try Python 3 http.server first
	if command -v python3 &> /dev/null; then
		echo "Starting Python 3 HTTP server on $ip_addr:$port..."
		# Try to open in browser (cross-platform approach)
		(sleep 1 && xdg-open "http://localhost:${port}/" 2>/dev/null || \
		 open "http://localhost:${port}/" 2>/dev/null || \
		 explorer.exe "http://localhost:${port}/" 2>/dev/null || \
		 echo "Please open http://localhost:${port}/ in your browser.") &
		python3 -m http.server "$port" --bind "$ip_addr"
	# Fallback to Python 2 SimpleHTTPServer
	elif command -v python &> /dev/null; then
		echo "Starting Python 2 HTTP server on $ip_addr:$port..."
		(sleep 1 && xdg-open "http://localhost:${port}/" 2>/dev/null || \
		 open "http://localhost:${port}/" 2>/dev/null || \
		 explorer.exe "http://localhost:${port}/" 2>/dev/null || \
		 echo "Please open http://localhost:${port}/ in your browser.") &
		python -m SimpleHTTPServer "$port" # Python 2 SimpleHTTPServer binds to 0.0.0.0 by default
	else
		echo "Python not found. Cannot start HTTP server."
		return 1
	fi
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
phpserver() {
    if ! command -v php &> /dev/null; then
        echo "PHP not found. Cannot start PHP server."
        return 1
    fi
	local port="${1:-4000}";
	local ip_addr="0.0.0.0" # Listen on all interfaces, use localhost for browser
    # Get a browseable IP (localhost is usually fine)
    local browse_ip="localhost"

	echo "Starting PHP server on $ip_addr:$port (browse at http://$browse_ip:$port/)..."
	(sleep 1 && xdg-open "http://${browse_ip}:${port}/" 2>/dev/null || \
	 open "http://${browse_ip}:${port}/" 2>/dev/null || \
	 explorer.exe "http://${browse_ip}:${port}/" 2>/dev/null || \
	 echo "Please open http://${browse_ip}:${port}/ in your browser.") &
	php -S "${ip_addr}:${port}";
}

# Compare original and gzipped file size
gz() {
    if [ -z "$1" ] || [ ! -f "$1" ]; then
        echo "Usage: gz <file>"
        return 1
    fi
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "scale=2; $gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%0.2f%% of original)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
digga() {
    if ! command -v dig &> /dev/null; then
        echo "dig command not found."
        return 1
    fi
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate for a given domain
getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

    # Use timeout to prevent hanging, 5 seconds should be enough
    local timeout_cmd="timeout"
    if ! command -v timeout &> /dev/null; then # macOS doesn't have timeout by default
        if command -v gtimeout &> /dev/null; then # GNU timeout via coreutils
            timeout_cmd="gtimeout"
        else
            timeout_cmd="" # No timeout command, run directly
            echo "WARN: 'timeout' command not found. openssl command might hang."
        fi
    fi

    local openssl_output
    if [ -n "$timeout_cmd" ]; then
        openssl_output=$($timeout_cmd 5 openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1 </dev/null)
    else
        openssl_output=$(echo -e "GET / HTTP/1.0\nEOT" | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)
    fi
    local return_code=$?

    if [ $return_code -ne 0 ]; then
        echo "ERROR: openssl s_client failed or timed out for ${domain}."
        # echo "Output: $openssl_output" # For debugging
        return 1
    fi

	if [[ "${openssl_output}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${openssl_output}" \
			| openssl x509 -text -noout -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version"); # -noout added
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| tail -n +2 | sed -e "s/DNS://g" -e "s/ //g" | tr "," "\n" | sed '/^\s*$/d'; # Cleaned up SAN parsing
		return 0;
	else
		echo "ERROR: Certificate not found in openssl output for ${domain}.";
        # echo "Debug output: ${openssl_output}" # For debugging
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows for the `o` function.
# The alias `open` is defined in aliases.sh. This is for the `o` function below.
_open_cmd() {
    if [[ "$(uname -s)" == "Darwin" ]]; then
        open "$@"
	elif command -v xdg-open &> /dev/null; then
        xdg-open "$@"
    elif command -v explorer.exe &> /dev/null; then # WSL
        # Convert path for WSL if it's a Unix-style path
        local target_path="$1"
        if [[ "$target_path" == /* && "$target_path" != //* ]]; then # Looks like a Unix path
            target_path=$(wslpath -w "$target_path")
        fi
        explorer.exe "${target_path:-.}" # Default to current dir if no arg
    else
        echo "Don't know how to open files on this system."
        return 1
    fi
}


# `o` with no arguments opens the current directory, otherwise opens the given location
o() {
	if [ $# -eq 0 ]; then
		_open_cmd ".";
	else
		_open_cmd "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# common large directories, listing directories first. Output piped to `less`.
tre() {
    if ! command -v tree &> /dev/null; then
        echo "tree command not found."
        return 1
    fi
	tree -aC -I '.git|node_modules|bower_components|vendor|.terraform|.cache|__pycache__|target' --dirsfirst "$@" | less -FRNX;
}


# juca function - from original dotfiles
# Purpose: Navigates to a folder, removes .git and .DS_Store, then navigates back.
# Original also had git add/commit/push parts, which are specific to a 'playground' repo.
# I'll keep the core local cleanup functionality.
juca() {
    if [ -z "$1" ]; then
        echo "Usage: juca <directory_path>"
        return 1
    fi
    if [ ! -d "$1" ]; then
        echo "Error: Directory '$1' not found."
        return 1
    fi

    echo "Processing directory: $1"

    # Using subshell to avoid manual pushd/popd issues and ensure directory change is isolated
    (
        cd "$1" || { echo "Error: Failed to cd into '$1'"; return 1; }
        echo "Current directory: $(pwd)"
        echo ""
        sleep 0.5 # Shortened sleep

        echo "Removing .git directory and .DS_Store file (if they exist)..."
        rm -rf .git
        rm -f .DS_Store
        echo "Cleanup complete in $1"
    )

    local subshell_exit_status=$?
    if [ $subshell_exit_status -ne 0 ]; then
        echo "Error during juca operations in subshell for '$1'."
        return $subshell_exit_status
    fi

    echo ""
    sleep 0.5 # Shortened sleep
    echo "Returned to original directory."
    echo "juca finished for $1."
}

# Function to extract most archive types
# Needs `unar` (The Unarchiver - brew install unar) or other tools like tar, unzip, 7z
extract() {
    if [ -z "$1" ]; then
        echo "Usage: extract <archive_file>"
        return 1
    fi
    if [ ! -f "$1" ]; then
        echo "File '$1' not found."
        return 1
    fi

    local filename="$1"
    local success=0

    if command -v unar &> /dev/null; then
        unar "$filename" && success=1
    else
        case "$filename" in
            *.tar.bz2|*.tbz2) tar xvjf "$filename" && success=1 ;;
            *.tar.gz|*.tgz)   tar xvzf "$filename" && success=1 ;;
            *.tar.xz|*.txz)   tar xvJf "$filename" && success=1 ;; # Needs tar version that supports J
            *.tar)            tar xvf "$filename" && success=1 ;;
            *.bz2)            bunzip2 "$filename" && success=1 ;;
            *.rar)            unrar x "$filename" && success=1 ;; # Needs unrar
            *.gz)             gunzip "$filename" && success=1 ;;
            *.zip|*.jar)      unzip "$filename" && success=1 ;;
            *.Z)              uncompress "$filename" && success=1 ;;
            *.7z)             7z x "$filename" && success=1 ;; # Needs 7zip
            *)
                echo "Don't know how to extract '$filename'. Try 'unar' or ensure appropriate tools (tar, unzip, 7z) are installed."
                return 1
                ;;
        esac
    fi

    if [ "$success" -eq 1 ]; then
        echo "'$filename' extracted successfully."
    else
        echo "Extraction of '$filename' failed."
        return 1
    fi
}

# Create a directory and cd into it, but prompt if directory exists
mkcd() {
    if [ -z "$1" ]; then
        echo "Usage: mkcd <directory_name>"
        return 1
    fi
    if [ -d "$1" ]; then
        read -r -p "Directory '$1' already exists. CD into it? (y/N): " response
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            cd "$1" || return 1
        else
            return 0
        fi
    else
        mkdir -p "$1" && cd "$1" || return 1
    fi
}

# Preview CSV files in a readable format
preview_csv() {
    if [ -z "$1" ]; then
        echo "Usage: preview_csv <file.csv>"
        return 1
    fi
    if ! command -v column &> /dev/null; then
        echo "'column' command not found. Cannot pretty print CSV."
        cat "$1"
        return
    fi
    column -s, -t < "$1" | less -S
}

# Check if a port is open
port_is_open() {
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "Usage: port_is_open <host> <port>"
        return 1
    fi
    # nc -zv <host> <port> # Original, but -z might not wait for connection.
    # Better: timeout with a small value.
    if command -v nc &> /dev/null; then
        if nc -w 1 -z "$1" "$2" < /dev/null &>/dev/null; then # timeout with -w 1 second
            echo "Port $2 on $1 is open."
            return 0
        else
            echo "Port $2 on $1 is closed or host unreachable."
            return 1
        fi
    elif command -v telnet &> /dev/null; then # Fallback for systems without nc
        # Telnet is trickier to script for this.
        # This is a basic check and might hang or give confusing output.
        echo "Trying telnet (less reliable for scripting)..."
        if (echo > /dev/tcp/"$1"/"$2") &>/dev/null; then # Bash specific /dev/tcp
             echo "Port $2 on $1 appears open (bash /dev/tcp)."
             return 0
        else
             echo "Port $2 on $1 appears closed or host unreachable (bash /dev/tcp)."
             return 1
        fi
    else
        echo "Neither 'nc' nor 'telnet' found to check port."
        return 1
    fi
}

# Get weather using wttr.in
weather() {
    local city="${1:-}" # Default to auto-detection by wttr.in
    curl -s "https://wttr.in/${city}?m" # ?m for metric, ?F for no "Follow" line
}
